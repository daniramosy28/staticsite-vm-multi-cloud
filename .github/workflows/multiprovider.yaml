name: Terraform Multicloud Da Dani

on:
  push:
    branches:
    - develop
    paths:
    -  '**.tf'

env:
  TERRAFORM_VERSION: 1.6.2

jobs:

  on-aws:
    name: AWS provider
    runs-on: ubuntu-latest
 
    steps:

    - name: Step 01 - Terraform Setup
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: $TERRAFORM_VERSION

    - name: Step 02 - Terraform Version
      run : terraform --version

    - name: Step 03 - CheckOut GitHub Repo
      uses: actions/checkout@v3

    - name: Step 04 - Authenticate with AWS
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id    : ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token    : ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region           : us-east-1

    - name: Step 05 Create S3 Bucket
      run: aws s3api create-bucket --bucket tf-state-multi-dani --region us-east-1   
          
    - name: Create DynamoDB Table
      run: aws dynamodb create-table --table-name tf-state-dani-multi --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5     
  
    - name: Step Configure Backend for Terraform
      run: echo 'terraform { backend "s3" { bucket = "tf-state-multi-dani" key = "path/to/terraform.tfstate" region = "us-east-1" } }' > backend.tf       

    - name: Step 06 - Terraform Init
      run : terraform -chdir=./terraform/aws init -input=false

    #- name: Step 07 - Terraform Security Scanning Setup
     # run : pip3 install checkov

    #- name: Step 08 - Terraform Security Scanning Run
     # run : checkov --directory ./terraform    

    - name: Step 09 - Terraform Validate
      run : terraform -chdir=./terraform/aws validate

    - name: Step 10 - Terraform Plan
      run : terraform -chdir=./terraform/aws plan -input=false -out tfplan
      #run : terraform -chdir=./terraform/aws plan -input=false -destroy -out tfplan

    - name: Step 11 - Terraform Apply
      run : terraform -chdir=./terraform/aws apply -auto-approve -input=false tfplan

    - name: Step 12 - Terraform Show
      run : terraform -chdir=./terraform/aws show

  on-azure:
    name: Azure provider
    runs-on: ubuntu-latest
    env:
        ARM_CLIENT_ID      : ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET  : ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID      : ${{ secrets.ARM_TENANT_ID }}
    
    steps:

    - name: Step 01 - Terraform Setup
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: $TERRAFORM_VERSION

    - name: Step 02 - Terraform Version
      run : terraform --version

    - name: Step 03 - CheckOut GitHub Repo
      uses: actions/checkout@v3

    - name: Step 04 - Authenticate with Azure
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

    - name: Step 05 - Terraform Init
      run : terraform -chdir=./terraform/azure init -input=false

    #- name: Step 06 - Terraform Security Scanning Setup
     # run : pip3 install checkov

    - name: Step 07 - Terraform Security Scanning Run
      run : checkov --directory ./terraform  

    - name: Step 08 - Terraform Validate
      run : terraform -chdir=./terraform/azure validate

    - name: Step 09 - Terraform Plan
      run : terraform -chdir=./terraform/azure plan -input=false -out tfplan
      #run : terraform -chdir=./terraform/azure plan -input=false -destroy -out tfplan

    - name: Step 10 - Terraform Apply
      run : terraform -chdir=./terraform/azure apply -auto-approve -input=false tfplan

    - name: Step 11 - Terraform Show
      run : terraform -chdir=./terraform/azure show